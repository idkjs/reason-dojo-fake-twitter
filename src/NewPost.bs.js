// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as ReasonUrql from "reason-urql/src/ReasonUrql.bs.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

var ppx_printed_query = "mutation post($message: String, $author: String)  {\nsendTweet(input: {message: $message, author: $author})  {\ntweet  {\nmessage  \n}\n\n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "sendTweet");
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeObject(Caml_option.valFromOption(match$1));
      if (match$2 !== undefined) {
        var match$3 = Js_dict.get(Caml_option.valFromOption(match$2), "tweet");
        var tmp$1;
        if (match$3 !== undefined) {
          var match$4 = Js_json.decodeObject(Caml_option.valFromOption(match$3));
          if (match$4 !== undefined) {
            var match$5 = Js_dict.get(Caml_option.valFromOption(match$4), "message");
            var tmp$2;
            if (match$5 !== undefined) {
              var value$1 = Caml_option.valFromOption(match$5);
              var match$6 = Js_json.decodeString(value$1);
              tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$1));
            } else {
              tmp$2 = Js_exn.raiseError("graphql_ppx: Field message on type TweetOutput is missing");
            }
            tmp$1 = {
              message: tmp$2
            };
          } else {
            tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
          }
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Field tweet on type SendTweetPayload is missing");
        }
        tmp = {
          tweet: tmp$1
        };
      } else {
        tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
      }
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field sendTweet on type mutation is missing");
    }
    return {
            sendTweet: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(message, author, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "message",
                  message !== undefined ? message : null
                ],
                /* tuple */[
                  "author",
                  author !== undefined ? author : null
                ]
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var message = variables.message;
  var author = variables.author;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "message",
                  message !== undefined ? message : null
                ],
                /* tuple */[
                  "author",
                  author !== undefined ? author : null
                ]
              ]),
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var PostTweet = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

function NewPost(Props) {
  var refetch = Props.refetch;
  var match = React.useState((function () {
          return "";
        }));
  var updateUsername = match[1];
  var username = match[0];
  var match$1 = React.useState((function () {
          return "";
        }));
  var updateText = match$1[1];
  var text = match$1[0];
  var match$2 = Curry._1(ReasonUrql.Hooks[/* useMutation */0], make(text, username, /* () */0));
  var executePost = match$2[1];
  var handle = function (cb, $$event) {
    var value = $$event.target.value;
    return Curry._1(cb, (function (param) {
                  return value;
                }));
  };
  var onClick = function (param) {
    Curry._1(executePost, /* () */0);
    Curry._1(refetch, /* () */0);
    return Curry._1(updateText, (function (param) {
                  return "";
                }));
  };
  return React.createElement("div", undefined, "Username:", React.createElement("input", {
                  type: "text",
                  value: username,
                  onChange: (function (param) {
                      return handle(updateUsername, param);
                    })
                }), React.createElement("br", undefined), React.createElement("textarea", {
                  value: text,
                  onChange: (function (param) {
                      return handle(updateText, param);
                    })
                }), React.createElement("br", undefined), React.createElement("button", {
                  onClick: onClick
                }, "Post"));
}

var make$1 = NewPost;

export {
  PostTweet ,
  make$1 as make,
  
}
/* react Not a pure module */
